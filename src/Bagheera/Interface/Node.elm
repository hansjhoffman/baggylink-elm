-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Bagheera.Interface.Node exposing (..)

import Bagheera.Interface
import Bagheera.Object
import Bagheera.Scalar
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import ScalarCodecs


type alias Fragments decodesTo =
    { onLink : SelectionSet decodesTo Bagheera.Object.Link
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Bagheera.Interface.Node
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Link" selections____.onLink
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onLink = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The ID of the object.
-}
id : SelectionSet ScalarCodecs.Id Bagheera.Interface.Node
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (ScalarCodecs.codecs |> Bagheera.Scalar.unwrapCodecs |> .codecId |> .decoder)
