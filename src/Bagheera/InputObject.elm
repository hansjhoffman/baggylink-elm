-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Bagheera.InputObject exposing (..)

import Bagheera.Scalar
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import ScalarCodecs


buildCreateLinkInput :
    CreateLinkInputRequiredFields
    -> CreateLinkInput
buildCreateLinkInput required____ =
    { url = required____.url }


type alias CreateLinkInputRequiredFields =
    { url : String }


{-| Type for the CreateLinkInput input object.
-}
type alias CreateLinkInput =
    { url : String }


{-| Encode a CreateLinkInput into a value that can be used as an argument.
-}
encodeCreateLinkInput : CreateLinkInput -> Value
encodeCreateLinkInput input____ =
    Encode.maybeObject
        [ ( "url", Encode.string input____.url |> Just ) ]


buildUpdateLinkInput :
    UpdateLinkInputRequiredFields
    -> (UpdateLinkInputOptionalFields -> UpdateLinkInputOptionalFields)
    -> UpdateLinkInput
buildUpdateLinkInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { url = Absent }
    in
    { id = required____.id, url = optionals____.url }


type alias UpdateLinkInputRequiredFields =
    { id : ScalarCodecs.LinkId }


type alias UpdateLinkInputOptionalFields =
    { url : OptionalArgument String }


{-| Type for the UpdateLinkInput input object.
-}
type alias UpdateLinkInput =
    { id : ScalarCodecs.LinkId
    , url : OptionalArgument String
    }


{-| Encode a UpdateLinkInput into a value that can be used as an argument.
-}
encodeUpdateLinkInput : UpdateLinkInput -> Value
encodeUpdateLinkInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> Bagheera.Scalar.unwrapEncoder .codecLinkId) input____.id |> Just ), ( "url", Encode.string |> Encode.optional input____.url ) ]
